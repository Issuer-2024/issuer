name: Build, Transfer, and Deploy Docker Image

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build-and-save:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # 1. Python 3.10 세팅
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 2. 의존성 캐시
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 3. 의존성 설치 및 애플리케이션 테스트
      - name: Install dependencies and run tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # pytest  # Uncomment and configure your tests

      # 4. Docker 이미지 빌드
      - name: Build Docker image
        run: docker build -t issuer-app:latest .

      # 5. Docker 이미지 파일로 저장
      - name: Save Docker image to file
        run: docker save -o issuer-app.tar issuer-app:latest

      # 6. Docker 이미지 파일 아티팩트로 업로드
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v3
        with:
          name: issuer-app-image
          path: issuer-app.tar

  transfer-image:
    runs-on: ubuntu-latest
    needs: build-and-save

    steps:
      - uses: actions/checkout@v3

      # 7. Docker 이미지 파일 아티팩트 다운로드
      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: issuer-app-image
          path: issuer-app.tar

      # 8. Docker 이미지 파일 전송
      - name: Copy Docker image via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "issuer-app.tar"
          target: "/home/${{ secrets.SSH_USER }}/issuer-app.tar"

  deploy:
    runs-on: ubuntu-latest
    needs: transfer-image

    steps:
      - name: SSH and Deploy
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Docker 이미지 로드
            docker load -i /home/${{ secrets.SSH_USER }}/issuer-app.tar
            
            # 환경 변수 설정
            export NAVER_API_CLIENT_ID=${{ secrets.NAVER_API_CLIENT_ID }}
            export NAVER_API_CLIENT_SECRET=${{ secrets.NAVER_API_CLIENT_SECRET }}
            export CLOVA_API_CLIENT_ID=${{ secrets.CLOVA_API_CLIENT_ID }}
            export CLOVA_API_CLIENT_SECRET=${{ secrets.CLOVA_API_CLIENT_SECRET }}
            export CLOVA_CHAT_COMPLETION_CLIENT_KEY=${{ secrets.CLOVA_CHAT_COMPLETION_CLIENT_KEY }}
            export CLOVA_CHAT_COMPLETION_CLIENT_KEY_PRIMARY_VAR=${{ secrets.CLOVA_CHAT_COMPLETION_CLIENT_KEY_PRIMARY_VAR }}
            export CLOVA_CHAT_COMPLETION_REQUEST_ID=${{ secrets.CLOVA_CHAT_COMPLETION_REQUEST_ID }}
            export CLOVA_EMBEDDING_CLIENT_KEY=${{ secrets.CLOVA_EMBEDDING_CLIENT_KEY }}
            export CLOVA_EMBEDDING_CLIENT_KEY_PRIMARY_VAR=${{ secrets.CLOVA_EMBEDDING_CLIENT_KEY_PRIMARY_VAR }}
            export CLOVA_EMBEDDING_REQUEST_ID=${{ secrets.CLOVA_EMBEDDING_REQUEST_ID }}
            export CLOVA_SUMMARY_CLIENT_KEY=${{ secrets.CLOVA_SUMMARY_CLIENT_KEY }}
            export CLOVA_SUMMARY_CLIENT_KEY_PRIMARY_VAR=${{ secrets.CLOVA_SUMMARY_CLIENT_KEY_PRIMARY_VAR }}
            export CLOVA_SUMMARY_REQUEST_ID=${{ secrets.CLOVA_SUMMARY_REQUEST_ID }}
            export CLOVA_CHAT_COMPLETION_003_CLIENT_KEY=${{ secrets.CLOVA_CHAT_COMPLETION_003_CLIENT_KEY }}
            export CLOVA_CHAT_COMPLETION_003_CLIENT_KEY_PRIMARY_VAR=${{ secrets.CLOVA_CHAT_COMPLETION_003_CLIENT_KEY_PRIMARY_VAR }}
            export CLOVA_CHAT_COMPLETION_003_CLIENT_KEY_REQUEST_ID=${{ secrets.CLOVA_CHAT_COMPLETION_003_CLIENT_KEY_REQUEST_ID }}
            
            # Docker Compose 실행
            cd /
            docker-compose up -d
            docker image prune -af
